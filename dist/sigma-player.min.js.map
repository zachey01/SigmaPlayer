{"version":3,"sources":["sigma-player.min.js","main.js","ui/controls.js","utils/formatTime.js","utils/getIcon.js","utils/network.js","utils/storage.js","helpers/events.js","helpers/quality.js","helpers/sources.js","ui/subMenu.js"],"names":["SigmaPlayer","constructor","videoElementOrSelector","options","this","video","document","querySelector","Error","closest","wrapper","createElement","id","parentNode","insertBefore","appendChild","createControlsUI","videoWrapper","videoType","videoSources","selectedTranslation","selectedQuality","autoQuality","hls","dashPlayer","isDragging","playEnabled","HIDE_CONTROLS_CLASS","IS_PLAYING_CLASS","IS_MUTED_CLASS","IS_FULLSCREEN_CLASS","SHOW_CLASS","longPressTimeout","longPressActivated","initialize","sources","loadVideoSources","console","error","showSpinner","loadingSpinner","style","display","hideSpinner","showCentralPlay","centralPlayBtn","hideCentralPlay","formatTime","timeInSeconds","getNetworkSpeed","chooseQualityBasedOnSpeed","getStoredQuality","storeQuality","quality","getStoredSpeed","storeSpeed","speed","updateTabIndices","menuOpen","settingsMenu","parentElement","classList","contains","querySelectorAll","forEach","item","setAttribute","volumeOpen","volumeContainer","volumeSlider","isMenuOpen","enablePlayButton","playBtn","disabled","opacity","disablePlayButton","togglePlayState","paused","ended","play","then","add","catch","err","pause","remove","toggleFullscreen","fullscreenElement","closeFullscreen","openFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","fullScreenBtn","position","top","left","transform","maxWidth","maxHeight","exitFullscreen","updateProgress","duration","percentage","currentTime","progress","width","updateTimeDisplay","newTime","current","undefined","currentTimeElem","textContent","durationElem","setTimeout","updateBuffered","buffered","length","bufferedEnd","end","bufferedWidth","handleTimelineClick","event","timelineWidth","timeline","offsetWidth","offsetX","startDrag","clientX","touches","updateTimeline","showSeekTooltip","dragTimeline","stopDrag","changedTouches","hideSeekTooltip","getBoundingClientRect","rect","time","seekTooltip","toggleVolume","toggle","closeOtherMenus","toggleSettingsMenuFunc","stopPropagation","setPlaybackSpeed","playbackRate","checkPlayButton","currentMenu","playerInstance","spinner","className","centralPlay","centralPlayIcon","getIcon","controlsWrapper","controlsInner","playPauseBtn","playIcon","pauseIcon","timelineContainer","fullTimeline","bufferedDiv","progressDiv","currentTimeSpan","durationSpan","createTextNode","muteBtn","volumeIcon","muteIcon","volumeMenu","type","writingMode","direction","min","max","step","value","dropdown","settingsBtn","settingsIcon","settingsMain","speedItem","dataset","menu","translationItem","qualityItem","settingsSubmenu","addEventListener","showSubmenu","fullscreenIcon","minimiseIcon","controls","volumeBtn","h","Math","floor","m","s","iconId","svgElement","createElementNS","useElement","setAttributeNS","navigator","connection","downlink","localStorage","getItem","setItem","parseFloat","prototype","handleDoubleClick","target","handleMouseDown","handleMouseUp","clearTimeout","showControls","savedVolume","vol","volume","muted","savedSpeed","alert","mouseActivityTimeout","bind","hideControls","resetMouseActivityTimeout","e","focusableItems","Array","from","filter","getAttribute","currentIndex","indexOf","activeElement","key","preventDefault","focus","selectQuality","store","autoUrl","warn","cleanUrl","split","endsWith","Hls","destroy","maxMaxBufferLength","maxBufferSize","maxBufferLength","attachMedia","on","Events","MEDIA_ATTACHED","loadSource","MANIFEST_PARSED","src","dashjs","reset","MediaPlayer","create","events","urls","selectedUrl","cleanSelectedUrl","setAutoSwitchQuality","selectQualityAuto","levelIndex","currentLevel","updateAutoQualityUI","setQualityFor","parseInt","level","populateQualityOptionsAuto","populateTranslationOptions","translationDropdown","translations","Object","keys","preferredQuality","qualities","sort","a","b","find","q","selectTranslation","translation","default","auto","isQualityMapping","timeoutDuration","window","hideSubmenu","innerHTML","menuType","backButton","backIcon","click","populateSpeedSubmenu","getTracksFor","populateTranslationSubmenu","msg","populateQualitySubmenu","label","speedOption","audioTracks","track","index","displayName","audioNames","isArray","names","order","extracted","lang","replace","num","orderArr","mappedIndex","namesArr","trackOption","trackIndex","setAudioTrack","autoOption","qualityList","getBitrateInfoListFor","qualitySet","Map","qualityLabel","height","bitrate","has","set","qualityIndex","qualityOption","setCurrentTrack","log","audioTrack","name"],"mappings":"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","file":"sigma-player.min.js","sourcesContent":[null,"class SigmaPlayer {\n    constructor(videoElementOrSelector, options = {}) {\n        if (typeof videoElementOrSelector === 'string') {\n            this.video = document.querySelector(videoElementOrSelector);\n        } else {\n            this.video = videoElementOrSelector;\n        }\n\n        if (!this.video) {\n            throw new Error('Video element not found');\n        }\n\n        if (!this.video.closest('#sigma__video-wrapper')) {\n            const wrapper = document.createElement('div');\n            wrapper.id = 'sigma__video-wrapper';\n            this.video.parentNode.insertBefore(wrapper, this.video);\n            wrapper.appendChild(this.video);\n        }\n\n        const wrapper = this.video.closest('#sigma__video-wrapper');\n        createControlsUI(wrapper, this);\n\n        this.videoWrapper = wrapper;\n        this.options = options;\n        this.videoType = options.videoType || null;\n        this.videoSources = {};\n        this.selectedTranslation = null;\n        this.selectedQuality = null;\n        this.autoQuality = false;\n\n        this.hls = null;\n        this.dashPlayer = null;\n\n        this.isDragging = false;\n        this.playEnabled = false;\n\n        this.HIDE_CONTROLS_CLASS = 'sigma__hide-controls';\n        this.IS_PLAYING_CLASS = 'sigma__isPlaying';\n        this.IS_MUTED_CLASS = 'sigma__isMute';\n        this.IS_FULLSCREEN_CLASS = 'sigma__isFullscreen';\n        this.SHOW_CLASS = 'sigma__show';\n\n        this.longPressTimeout = null;\n        this.longPressActivated = false;\n\n        this.initialize();\n\n        if (this.options.sources) {\n            this.loadVideoSources(this.options.sources);\n        } else {\n            console.error('Нет источников видео');\n        }\n    }\n\n    // --- Helper methods for UI ---\n    showSpinner = () => {\n        this.loadingSpinner.style.display = 'block';\n    };\n\n    hideSpinner = () => {\n        this.loadingSpinner.style.display = 'none';\n    };\n\n    showCentralPlay = () => {\n        this.centralPlayBtn.style.display = 'flex';\n    };\n\n    hideCentralPlay = () => {\n        this.centralPlayBtn.style.display = 'none';\n    };\n\n    formatTime = (timeInSeconds) => {\n        return formatTime(timeInSeconds);\n    };\n\n    getNetworkSpeed = () => {\n        return getNetworkSpeed();\n    };\n\n    chooseQualityBasedOnSpeed = () => {\n        return chooseQualityBasedOnSpeed();\n    };\n\n    getStoredQuality = () => {\n        return getStoredQuality();\n    };\n\n    storeQuality = (quality) => {\n        storeQuality(quality);\n    };\n\n    getStoredSpeed = () => {\n        return getStoredSpeed();\n    };\n\n    storeSpeed = (speed) => {\n        storeSpeed(speed);\n    };\n\n    updateTabIndices = () => {\n        const menuOpen = this.settingsMenu.parentElement.classList.contains(\n            this.SHOW_CLASS,\n        );\n        const settingsItems = this.settingsMenu.querySelectorAll(\n            '.sigma__dropdown-item',\n        );\n        settingsItems.forEach((item) => {\n            item.setAttribute('tabindex', menuOpen ? '0' : '-1');\n        });\n        const volumeOpen = this.volumeContainer.classList.contains('active');\n        if (this.volumeSlider) {\n            this.volumeSlider.setAttribute('tabindex', volumeOpen ? '0' : '-1');\n        }\n    };\n\n    isMenuOpen = () => {\n        return (\n            (this.settingsMenu &&\n                this.settingsMenu.parentElement &&\n                this.settingsMenu.parentElement.classList.contains(\n                    this.SHOW_CLASS,\n                )) ||\n            (this.volumeContainer &&\n                this.volumeContainer.classList.contains('active'))\n        );\n    };\n\n    // --- Loading video sources ---\n    enablePlayButton = () => {\n        this.playBtn.disabled = false;\n        this.playBtn.style.opacity = 1;\n    };\n\n    disablePlayButton = () => {\n        this.playBtn.disabled = true;\n        this.playBtn.style.opacity = 0.5;\n    };\n\n    togglePlayState = () => {\n        if (this.video.paused || this.video.ended) {\n            this.video\n                .play()\n                .then(() => {\n                    this.playBtn.classList.add(this.IS_PLAYING_CLASS);\n                })\n                .catch((err) => {\n                    console.error('Error playing video:', err);\n                    this.hideSpinner();\n                });\n        } else {\n            this.video.pause();\n            this.playBtn.classList.remove(this.IS_PLAYING_CLASS);\n        }\n    };\n\n    toggleFullscreen = () => {\n        if (!document.fullscreenElement) {\n            this.openFullscreen();\n        } else {\n            this.closeFullscreen();\n        }\n    };\n\n    openFullscreen = () => {\n        if (this.videoWrapper.requestFullscreen) {\n            this.videoWrapper.requestFullscreen();\n        } else if (this.videoWrapper.webkitRequestFullscreen) {\n            this.videoWrapper.webkitRequestFullscreen();\n        } else if (this.videoWrapper.msRequestFullscreen) {\n            this.videoWrapper.msRequestFullscreen();\n        }\n        this.fullScreenBtn.classList.add(this.IS_FULLSCREEN_CLASS);\n        this.video.style.position = 'absolute';\n        this.video.style.top = '50%';\n        this.video.style.left = '50%';\n        this.video.style.transform = 'translate(-50%, -50%)';\n        this.video.style.maxWidth = '100%';\n        this.video.style.maxHeight = '100%';\n    };\n\n    closeFullscreen = () => {\n        if (document.fullscreenElement) {\n            document.exitFullscreen().catch((err) => {\n                console.error('Error exiting fullscreen:', err);\n            });\n        }\n        this.fullScreenBtn.classList.remove(this.IS_FULLSCREEN_CLASS);\n        this.video.style.position = '';\n        this.video.style.top = '';\n        this.video.style.left = '';\n        this.video.style.transform = '';\n        this.video.style.maxWidth = '';\n        this.video.style.maxHeight = '';\n    };\n\n    updateProgress = () => {\n        if (!this.isDragging && this.video.duration) {\n            const percentage =\n                (this.video.currentTime / this.video.duration) * 100;\n            this.progress.style.width = percentage + '%';\n            this.updateTimeDisplay();\n        }\n    };\n\n    updateTimeDisplay = (newTime) => {\n        const current =\n            newTime !== undefined ? newTime : this.video.currentTime;\n        const duration = this.video.duration || 0;\n        this.currentTimeElem.textContent = this.formatTime(current);\n        this.durationElem.textContent = this.formatTime(duration);\n        this.currentTimeElem.classList.add('countdown');\n        setTimeout(\n            () => this.currentTimeElem.classList.remove('countdown'),\n            500,\n        );\n    };\n\n    updateBuffered = () => {\n        if (this.video.buffered.length > 0) {\n            const bufferedEnd = this.video.buffered.end(\n                this.video.buffered.length - 1,\n            );\n            const duration = this.video.duration;\n            if (duration > 0) {\n                const bufferedWidth = (bufferedEnd / duration) * 100;\n                this.progress.parentElement.querySelector(\n                    '.sigma__buffered',\n                ).style.width = `${bufferedWidth}%`;\n            }\n        }\n    };\n\n    handleTimelineClick = (event) => {\n        if (!this.video.duration) return;\n        const timelineWidth = this.timeline.offsetWidth;\n        const clickX = event.offsetX;\n        const newTime = (clickX / timelineWidth) * this.video.duration;\n        this.video.currentTime = newTime;\n    };\n\n    startDrag = (event) => {\n        this.isDragging = true;\n        const clientX = event.touches\n            ? event.touches[0].clientX\n            : event.clientX;\n        this.updateTimeline(clientX);\n        this.showSeekTooltip(clientX);\n    };\n\n    dragTimeline = (event) => {\n        if (this.isDragging && this.video.duration) {\n            const clientX = event.touches\n                ? event.touches[0].clientX\n                : event.clientX;\n            this.updateTimeline(clientX);\n            this.showSeekTooltip(clientX);\n        }\n    };\n\n    stopDrag = (event) => {\n        if (this.isDragging && this.video.duration) {\n            this.isDragging = false;\n            const clientX = event.changedTouches\n                ? event.changedTouches[0].clientX\n                : event.clientX;\n            this.hideSeekTooltip();\n            this.updateTimeline(clientX);\n            const rect = this.timeline.getBoundingClientRect();\n            const newTime =\n                ((clientX - rect.left) / this.timeline.offsetWidth) *\n                this.video.duration;\n            this.video.currentTime = newTime;\n        }\n    };\n\n    updateTimeline = (clientX) => {\n        const rect = this.timeline.getBoundingClientRect();\n        let offsetX = clientX - rect.left;\n        if (offsetX < 0) offsetX = 0;\n        if (offsetX > rect.width) offsetX = rect.width;\n        const percentage = (offsetX / rect.width) * 100;\n        this.progress.style.width = percentage + '%';\n        const newTime = (offsetX / rect.width) * this.video.duration;\n        this.updateTimeDisplay(newTime);\n    };\n\n    showSeekTooltip = (clientX) => {\n        const rect = this.timeline.getBoundingClientRect();\n        let offsetX = clientX - rect.left;\n        if (offsetX < 0) offsetX = 0;\n        if (offsetX > rect.width) offsetX = rect.width;\n        const percentage = offsetX / rect.width;\n        const newTime = percentage * this.video.duration;\n        const time = this.formatTime(newTime);\n        this.seekTooltip.textContent = time;\n        this.seekTooltip.style.left = `${offsetX}px`;\n        this.seekTooltip.style.display = 'block';\n    };\n\n    hideSeekTooltip = () => {\n        this.seekTooltip.style.display = 'none';\n    };\n\n    toggleVolume = () => {\n        this.volumeContainer.classList.toggle('active');\n        this.closeOtherMenus('volume');\n        this.updateTabIndices();\n    };\n\n    toggleSettingsMenuFunc = (event) => {\n        event.stopPropagation();\n        this.settingsMenu.parentElement.classList.toggle(this.SHOW_CLASS);\n        this.closeOtherMenus('settings');\n        this.updateTabIndices();\n    };\n\n    setPlaybackSpeed = (speed) => {\n        this.video.playbackRate = speed;\n        this.storeSpeed(speed);\n    };\n\n    checkPlayButton = () => {\n        if (this.playEnabled) {\n            this.enablePlayButton();\n        } else {\n            this.disablePlayButton();\n        }\n    };\n\n    closeOtherMenus = (currentMenu) => {\n        if (currentMenu === 'settings') {\n            if (this.volumeContainer.classList.contains('active')) {\n                this.volumeContainer.classList.remove('active');\n            }\n        } else if (currentMenu === 'volume') {\n            if (\n                this.settingsMenu.parentElement.classList.contains(\n                    this.SHOW_CLASS,\n                )\n            ) {\n                this.settingsMenu.parentElement.classList.remove(\n                    this.SHOW_CLASS,\n                );\n            }\n        }\n        this.updateTabIndices();\n    };\n}\n","SigmaPlayer.prototype.showControls = function () {\n    this.controls.classList.remove(this.HIDE_CONTROLS_CLASS);\n    this.resetMouseActivityTimeout();\n};\n\nSigmaPlayer.prototype.hideControls = function () {\n    if (this.isMenuOpen()) return;\n    if (!this.video.paused && !this.video.ended) {\n        this.controls.classList.add(this.HIDE_CONTROLS_CLASS);\n    }\n};\n\nSigmaPlayer.prototype.resetMouseActivityTimeout = function () {\n    clearTimeout(this.mouseActivityTimeout);\n    if (!this.video.paused && !this.video.ended) {\n        const timeoutDuration = 'ontouchstart' in window ? 5000 : 3000;\n        this.mouseActivityTimeout = setTimeout(() => {\n            this.hideControls();\n        }, timeoutDuration);\n    }\n};\n\nfunction createControlsUI(wrapper, playerInstance) {\n    if (wrapper.querySelector('#sigma__controls')) return;\n\n    // --- Создаём загрузчик (spinner) ---\n    const spinner = document.createElement('div');\n    spinner.id = 'sigma__loading-spinner';\n    spinner.className = 'sigma__spinner';\n    wrapper.appendChild(spinner);\n    playerInstance.loadingSpinner = spinner;\n\n    // --- Центральная кнопка воспроизведения ---\n    const centralPlay = document.createElement('button');\n    centralPlay.id = 'sigma__central-play';\n    centralPlay.className = 'sigma__central-play-button';\n    centralPlay.setAttribute('tabindex', '0');\n    const centralPlayIcon = getIcon('sigma-play-btn');\n    centralPlayIcon.classList.add('sigma__centralPlayIcon');\n    centralPlay.appendChild(centralPlayIcon);\n    wrapper.appendChild(centralPlay);\n\n    // --- Контейнер управления ---\n    const controlsWrapper = document.createElement('div');\n    controlsWrapper.id = 'sigma__controls-wrapper';\n    controlsWrapper.className = 'sigma__control-wrapper';\n\n    const controlsInner = document.createElement('div');\n    controlsInner.className = 'sigma__controls sigma__controlsInner';\n\n    // Кнопка Play/Pause\n    const playPauseBtn = document.createElement('button');\n    playPauseBtn.id = 'sigma__play-pause';\n    playPauseBtn.setAttribute('tabindex', '0');\n    const playIcon = getIcon('sigma-play');\n    playIcon.classList.add('sigma__playIcon');\n    const pauseIcon = getIcon('sigma-pause');\n    pauseIcon.classList.add('sigma__pauseIcon');\n    playPauseBtn.appendChild(playIcon);\n    playPauseBtn.appendChild(pauseIcon);\n    controlsInner.appendChild(playPauseBtn);\n\n    // Таймлайн и отображение времени\n    const timelineContainer = document.createElement('div');\n    timelineContainer.className = 'sigma__timeline-container';\n    timelineContainer.setAttribute('tabindex', '0');\n    const timeline = document.createElement('div');\n    timeline.id = 'sigma__timeline';\n    timeline.className = 'sigma__timeline-spacer';\n    const fullTimeline = document.createElement('div');\n    fullTimeline.className = 'sigma__full-timeline';\n    const bufferedDiv = document.createElement('div');\n    bufferedDiv.className = 'sigma__buffered';\n    const progressDiv = document.createElement('div');\n    progressDiv.id = 'sigma__progress';\n    fullTimeline.appendChild(bufferedDiv);\n    fullTimeline.appendChild(progressDiv);\n    timeline.appendChild(fullTimeline);\n    const seekTooltip = document.createElement('div');\n    seekTooltip.id = 'sigma__seek-tooltip';\n    seekTooltip.className = 'sigma__seek-tooltip';\n    seekTooltip.textContent = '0:00:00';\n    timeline.appendChild(seekTooltip);\n    timelineContainer.appendChild(timeline);\n    const currentTimeSpan = document.createElement('span');\n    currentTimeSpan.id = 'sigma__current-time';\n    currentTimeSpan.textContent = '0:00:00';\n    const durationSpan = document.createElement('span');\n    durationSpan.id = 'sigma__duration';\n    durationSpan.textContent = '0:00:00';\n    timelineContainer.appendChild(currentTimeSpan);\n    timelineContainer.appendChild(document.createTextNode(' / '));\n    timelineContainer.appendChild(durationSpan);\n    controlsInner.appendChild(timelineContainer);\n\n    // --- Контейнер громкости ---\n    const volumeContainer = document.createElement('div');\n    volumeContainer.className = 'sigma__volume-container';\n    const muteBtn = document.createElement('button');\n    muteBtn.id = 'sigma__mute';\n    muteBtn.className = 'sigma__isMute';\n    muteBtn.setAttribute('tabindex', '0');\n    const volumeIcon = getIcon('sigma-volume-2');\n    volumeIcon.classList.add('sigma__volumeIcon');\n    const muteIcon = getIcon('sigma-volume-0');\n    muteIcon.classList.add('sigma__muteIcon');\n    muteBtn.appendChild(volumeIcon);\n    muteBtn.appendChild(muteIcon);\n    volumeContainer.appendChild(muteBtn);\n    const volumeMenu = document.createElement('div');\n    volumeMenu.id = 'volume-menu';\n    volumeMenu.className = 'sigma__volume-dropdown';\n    const volumeSlider = document.createElement('input');\n    volumeSlider.id = 'sigma__volume-slider';\n    volumeSlider.type = 'range';\n    volumeSlider.style.writingMode = 'vertical-lr';\n    volumeSlider.style.direction = 'rtl';\n    volumeSlider.min = '0';\n    volumeSlider.max = '1';\n    volumeSlider.step = '0.01';\n    volumeSlider.value = '1';\n    volumeSlider.setAttribute('tabindex', '-1');\n    volumeMenu.appendChild(volumeSlider);\n    volumeContainer.appendChild(volumeMenu);\n    controlsInner.appendChild(volumeContainer);\n\n    // --- Настройки (dropdown) ---\n    const dropdown = document.createElement('div');\n    dropdown.className = 'sigma__dropdown';\n    const settingsBtn = document.createElement('button');\n    settingsBtn.id = 'sigma__settings-btn';\n    settingsBtn.setAttribute('tabindex', '0');\n    const settingsIcon = getIcon('sigma-settings');\n    settingsIcon.classList.add('sigma__settingsIcon');\n    settingsBtn.appendChild(settingsIcon);\n    dropdown.appendChild(settingsBtn);\n\n    const settingsMenu = document.createElement('div');\n    settingsMenu.id = 'sigma__settings-menu';\n    settingsMenu.className = 'sigma__dropdown-content';\n    // Главный раздел меню\n    const settingsMain = document.createElement('div');\n    settingsMain.className = 'sigma__settings-main';\n    const speedItem = document.createElement('div');\n    speedItem.className = 'sigma__dropdown-item';\n    speedItem.dataset.menu = 'speed';\n    speedItem.textContent = 'Скорость';\n    settingsMain.appendChild(speedItem);\n    const translationItem = document.createElement('div');\n    translationItem.className = 'sigma__dropdown-item';\n    translationItem.dataset.menu = 'translation';\n    translationItem.textContent = 'Озвучка';\n    settingsMain.appendChild(translationItem);\n    const qualityItem = document.createElement('div');\n    qualityItem.className = 'sigma__dropdown-item';\n    qualityItem.dataset.menu = 'quality';\n    qualityItem.textContent = 'Качество';\n    settingsMain.appendChild(qualityItem);\n    // Подменю\n    const settingsSubmenu = document.createElement('div');\n    settingsSubmenu.className = 'sigma__settings-submenu';\n    settingsSubmenu.style.display = 'none';\n    settingsMenu.appendChild(settingsMain);\n    settingsMenu.appendChild(settingsSubmenu);\n    dropdown.appendChild(settingsMenu);\n    controlsInner.appendChild(dropdown);\n\n    // При клике – навигация в подменю\n    speedItem.addEventListener('click', () => {\n        playerInstance.showSubmenu('speed');\n    });\n    translationItem.addEventListener('click', () => {\n        playerInstance.showSubmenu('translation');\n    });\n    qualityItem.addEventListener('click', () => {\n        playerInstance.showSubmenu('quality');\n    });\n\n    // --- Полноэкранный режим ---\n    const fullScreenBtn = document.createElement('button');\n    fullScreenBtn.id = 'sigma__full-screen';\n    fullScreenBtn.setAttribute('tabindex', '0');\n    const fullscreenIcon = getIcon('sigma-maximize');\n    fullscreenIcon.classList.add('sigma__fullscreenIcon');\n    const minimiseIcon = getIcon('sigma-minimize');\n    minimiseIcon.classList.add('sigma__minimiseIcon');\n    fullScreenBtn.appendChild(fullscreenIcon);\n    fullScreenBtn.appendChild(minimiseIcon);\n    controlsInner.appendChild(fullScreenBtn);\n\n    controlsWrapper.appendChild(controlsInner);\n    wrapper.appendChild(controlsWrapper);\n\n    // Сохраняем ссылки в объекте playerInstance\n    playerInstance.centralPlayBtn = wrapper.querySelector(\n        '#sigma__central-play',\n    );\n    playerInstance.seekTooltip = wrapper.querySelector('#sigma__seek-tooltip');\n    playerInstance.videoWrapper = wrapper;\n    playerInstance.controls = wrapper.querySelector('#sigma__controls-wrapper');\n    playerInstance.playBtn = wrapper.querySelector('#sigma__play-pause');\n    playerInstance.volumeBtn = wrapper.querySelector('#sigma__mute');\n    playerInstance.fullScreenBtn = fullScreenBtn;\n    playerInstance.timeline = wrapper.querySelector('#sigma__timeline');\n    playerInstance.progress = wrapper.querySelector('#sigma__progress');\n    playerInstance.currentTimeElem = wrapper.querySelector(\n        '#sigma__current-time',\n    );\n    playerInstance.durationElem = wrapper.querySelector('#sigma__duration');\n    playerInstance.volumeContainer = volumeContainer;\n    playerInstance.volumeMenu = volumeMenu;\n    playerInstance.volumeSlider = volumeSlider;\n    playerInstance.settingsBtn = settingsBtn;\n    playerInstance.settingsMenu = settingsMenu;\n    playerInstance.settingsMain = settingsMain;\n    playerInstance.settingsSubmenu = settingsSubmenu;\n}\n","function formatTime(timeInSeconds) {\n    const h = Math.floor(timeInSeconds / 3600);\n    const m = Math.floor((timeInSeconds % 3600) / 60);\n    const s = Math.floor(timeInSeconds % 60);\n    if (h > 0) {\n        return `${h}:${m < 10 ? '0' : ''}${m}:${s < 10 ? '0' : ''}${s}`;\n    } else {\n        return `${m}:${s < 10 ? '0' : ''}${s}`;\n    }\n}\n","function getIcon(iconId) {\n    const svgElement = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'svg',\n    );\n\n    svgElement.setAttribute('class', 'sigma__icon');\n    svgElement.setAttribute('width', '24');\n    svgElement.setAttribute('height', '24');\n    svgElement.setAttribute('viewBox', '0 0 24 24');\n\n    const useElement = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'use',\n    );\n    useElement.setAttributeNS(\n        'http://www.w3.org/1999/xlink',\n        'xlink:href',\n        `#${iconId}`,\n    );\n\n    svgElement.appendChild(useElement);\n\n    return svgElement;\n}\n","function getNetworkSpeed() {\n    if (navigator.connection && navigator.connection.downlink) {\n        return navigator.connection.downlink;\n    }\n    return 5;\n}\n\nfunction chooseQualityBasedOnSpeed() {\n    const speed = getNetworkSpeed();\n    if (speed >= 20) {\n        return '8K';\n    } else if (speed >= 10) {\n        return '4K';\n    } else if (speed >= 5) {\n        return '1080';\n    } else if (speed >= 2.5) {\n        return '720';\n    } else if (speed >= 1) {\n        return '480';\n    } else {\n        return '360';\n    }\n}\n","function getStoredQuality() {\n    return localStorage.getItem('sigma-preferredQuality');\n}\n\nfunction storeQuality(quality) {\n    localStorage.setItem('sigma-preferredQuality', quality);\n}\n\nfunction getStoredSpeed() {\n    const speed = localStorage.getItem('sigma-playbackSpeed');\n    return speed ? parseFloat(speed) : 1.0;\n}\n\nfunction storeSpeed(speed) {\n    localStorage.setItem('sigma-playbackSpeed', speed);\n}\n","SigmaPlayer.prototype.handleDoubleClick = function (event) {\n    if (event.target.closest('#sigma__controls-wrapper')) return;\n    const rect = this.videoWrapper.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    if (x < rect.width / 2) {\n        this.video.currentTime = Math.max(0, this.video.currentTime - 10);\n    } else {\n        this.video.currentTime = Math.min(\n            this.video.duration,\n            this.video.currentTime + 10,\n        );\n    }\n};\n\nSigmaPlayer.prototype.handleMouseDown = function (event) {\n    if (event.target.closest('#sigma__controls-wrapper')) return;\n    this.longPressTimeout = setTimeout(() => {\n        this.video.playbackRate = 2;\n        this.longPressActivated = true;\n    }, 3000);\n};\n\nSigmaPlayer.prototype.handleMouseUp = function (event) {\n    clearTimeout(this.longPressTimeout);\n    if (this.longPressActivated) {\n        this.video.playbackRate = 1;\n        this.longPressActivated = false;\n    }\n};\n\nSigmaPlayer.prototype.initialize = function () {\n    this.video.addEventListener('play', () => {\n        this.playBtn.classList.add(this.IS_PLAYING_CLASS);\n        this.hideSpinner();\n    });\n\n    this.video.addEventListener('pause', () => {\n        this.playBtn.classList.remove(this.IS_PLAYING_CLASS);\n        this.hideSpinner();\n    });\n\n    this.video.addEventListener('ended', () => {\n        this.playBtn.classList.remove(this.IS_PLAYING_CLASS);\n        this.showControls();\n        this.hideSpinner();\n    });\n\n    this.video.addEventListener('waiting', this.showSpinner);\n    this.video.addEventListener('playing', this.hideSpinner);\n    this.video.addEventListener('pause', this.showCentralPlay);\n    this.video.addEventListener('play', this.hideCentralPlay);\n    this.video.addEventListener('ended', this.showCentralPlay);\n\n    this.disablePlayButton();\n\n    const savedVolume = localStorage.getItem('volume');\n    if (savedVolume !== null) {\n        const vol = parseFloat(savedVolume);\n        this.video.volume = vol;\n        this.volumeSlider.value = vol;\n        if (vol === 0) {\n            this.video.muted = true;\n            this.volumeBtn.classList.add(this.IS_MUTED_CLASS);\n        } else {\n            this.video.muted = false;\n            this.volumeBtn.classList.remove(this.IS_MUTED_CLASS);\n        }\n    } else {\n        this.video.volume = 1;\n        this.volumeSlider.value = 1;\n    }\n\n    const savedSpeed = this.getStoredSpeed();\n    this.video.playbackRate = savedSpeed;\n\n    this.playBtn.addEventListener('click', () => {\n        if (this.playEnabled) {\n            this.togglePlayState();\n        } else {\n            alert(\n                'Пожалуйста, выберите озвучку и качество перед воспроизведением.',\n            );\n        }\n    });\n\n    this.centralPlayBtn.addEventListener('click', () => {\n        if (this.playEnabled) {\n            this.togglePlayState();\n        }\n    });\n\n    this.fullScreenBtn.addEventListener('click', this.toggleFullscreen);\n\n    this.video.addEventListener('timeupdate', this.updateProgress);\n    this.video.addEventListener('loadedmetadata', () => {\n        this.updateTimeDisplay();\n    });\n\n    this.video.addEventListener('sigma__progress', this.updateBuffered);\n\n    this.timeline.addEventListener('click', this.handleTimelineClick);\n    this.timeline.addEventListener('mousedown', this.startDrag);\n    document.addEventListener('mouseup', this.stopDrag);\n    document.addEventListener('mousemove', this.dragTimeline);\n    this.timeline.addEventListener('touchstart', this.startDrag);\n    document.addEventListener('touchend', this.stopDrag);\n    document.addEventListener('touchmove', this.dragTimeline);\n    this.volumeBtn.addEventListener('click', (event) => {\n        event.stopPropagation();\n        this.toggleVolume();\n    });\n\n    document.addEventListener('click', (event) => {\n        if (!event.target.closest('.sigma__dropdown')) {\n            let dropdown = this.settingsMenu.parentElement;\n            if (dropdown.classList.contains(this.SHOW_CLASS)) {\n                dropdown.classList.remove(this.SHOW_CLASS);\n                this.updateTabIndices();\n            }\n        }\n    });\n\n    document.addEventListener('fullscreenchange', () => {\n        if (!document.fullscreenElement) {\n            this.fullScreenBtn.classList.remove(this.IS_FULLSCREEN_CLASS);\n            this.video.style.position = '';\n            this.video.style.top = '';\n            this.video.style.left = '';\n            this.video.style.transform = '';\n            this.video.style.maxWidth = '';\n            this.video.style.maxHeight = '';\n        }\n    });\n\n    this.mouseActivityTimeout = null;\n    this.showControls = this.showControls.bind(this);\n    this.hideControls = this.hideControls.bind(this);\n    this.resetMouseActivityTimeout = this.resetMouseActivityTimeout.bind(this);\n    this.videoWrapper.addEventListener('mousemove', this.showControls);\n    this.video.addEventListener('pause', this.showControls);\n    this.video.addEventListener('play', this.resetMouseActivityTimeout);\n    this.videoWrapper.addEventListener('mouseenter', this.showControls);\n    this.videoWrapper.addEventListener('mouseleave', this.hideControls);\n    this.controls.addEventListener('mousemove', this.showControls);\n    this.controls.addEventListener('mouseenter', this.showControls);\n    this.controls.addEventListener(\n        'mouseleave',\n        this.resetMouseActivityTimeout,\n    );\n    this.videoWrapper.addEventListener('touchstart', this.showControls);\n    this.videoWrapper.addEventListener('touchend', () => {\n        setTimeout(this.hideControls, 5000);\n    });\n    this.resetMouseActivityTimeout();\n\n    this.settingsBtn.addEventListener('click', this.toggleSettingsMenuFunc);\n\n    this.videoWrapper.addEventListener('dblclick', this.handleDoubleClick);\n    this.videoWrapper.addEventListener('mousedown', this.handleMouseDown);\n    this.videoWrapper.addEventListener('touchstart', this.handleMouseDown);\n    this.videoWrapper.addEventListener('mouseup', this.handleMouseUp);\n    this.videoWrapper.addEventListener('touchend', this.handleMouseUp);\n    this.videoWrapper.addEventListener('mouseleave', this.handleMouseUp);\n\n    this.settingsMenu.addEventListener('keydown', (e) => {\n        const focusableItems = Array.from(\n            this.settingsMenu.querySelectorAll('.sigma__dropdown-item'),\n        ).filter((item) => item.getAttribute('tabindex') === '0');\n        if (focusableItems.length === 0) return;\n        const currentIndex = focusableItems.indexOf(document.activeElement);\n        if (e.key === 'ArrowDown') {\n            e.preventDefault();\n            const nextIndex = (currentIndex + 1) % focusableItems.length;\n            focusableItems[nextIndex].focus();\n        } else if (e.key === 'ArrowUp') {\n            e.preventDefault();\n            const nextIndex =\n                (currentIndex - 1 + focusableItems.length) %\n                focusableItems.length;\n            focusableItems[nextIndex].focus();\n        } else if (e.key === 'Escape') {\n            this.settingsMenu.parentElement.classList.remove(this.SHOW_CLASS);\n            this.updateTabIndices();\n            this.settingsBtn.focus();\n        }\n    });\n};\n","SigmaPlayer.prototype.selectQuality = function (quality, store = true) {\n    const currentTime = this.video.currentTime;\n    this.showSpinner();\n\n    if (this.autoQuality) {\n        const sources = this.videoSources[this.selectedTranslation];\n        const autoUrl = sources['auto'];\n\n        if (!autoUrl) {\n            console.warn('Sources are not available');\n            this.hideSpinner();\n            return;\n        }\n\n        const cleanUrl = autoUrl.split('?')[0];\n\n        if (!this.videoType) {\n            if (cleanUrl.endsWith('.m3u8')) {\n                this.videoType = 'hls';\n            } else if (cleanUrl.endsWith('.mpd')) {\n                this.videoType = 'dash';\n            } else {\n                this.videoType = 'mp4';\n            }\n        }\n\n        if (this.videoType === 'hls') {\n            if (typeof Hls === 'undefined') {\n                console.warn('hls.js не доступен');\n                this.hideSpinner();\n                return;\n            }\n            if (cleanUrl.endsWith('.m3u8')) {\n                if (this.hls) {\n                    this.hls.destroy();\n                    this.hls = null;\n                }\n                this.hls = new Hls({\n                    maxMaxBufferLength: 30,\n                    maxBufferSize: 5 * 1024 * 1024,\n                    maxBufferLength: 30,\n                });\n                this.hls.attachMedia(this.video);\n                this.hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n                    this.hls.loadSource(autoUrl);\n                });\n                this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                    this.video.currentTime = currentTime;\n                    this.video.play().catch((err) => {\n                        console.error('Error playing video:', err);\n                        this.hideSpinner();\n                    });\n                });\n            } else {\n                this.video.src = autoUrl;\n                this.video.currentTime = currentTime;\n                this.video.play().catch((err) => {\n                    console.error('Error playing video:', err);\n                    this.hideSpinner();\n                });\n                this.hideSpinner();\n            }\n        } else if (this.videoType === 'dash') {\n            if (typeof dashjs === 'undefined') {\n                console.warn('dash.js не доступен');\n                this.hideSpinner();\n                return;\n            }\n            if (cleanUrl.endsWith('.mpd')) {\n                if (this.dashPlayer) {\n                    this.dashPlayer.reset();\n                    this.dashPlayer = null;\n                }\n                this.dashPlayer = dashjs.MediaPlayer().create();\n                this.dashPlayer.initialize(this.video, autoUrl, false);\n                this.dashPlayer.on(\n                    dashjs.MediaPlayer.events['MANIFEST_LOADED'],\n                    () => {\n                        this.video.currentTime = currentTime;\n                        this.video.play().catch((err) => {\n                            console.error('Error playing video:', err);\n                            this.hideSpinner();\n                        });\n                    },\n                );\n            } else {\n                this.video.src = autoUrl;\n                this.video.currentTime = currentTime;\n                this.video.play().catch((err) => {\n                    console.error('Error playing video:', err);\n                    this.hideSpinner();\n                });\n                this.hideSpinner();\n            }\n        } else {\n            this.video.src = autoUrl;\n            this.video.currentTime = currentTime;\n            this.video.play().catch((err) => {\n                console.error('Error playing video:', err);\n                this.hideSpinner();\n            });\n            this.hideSpinner();\n        }\n    } else {\n        if (!this.selectedTranslation) {\n            console.warn(\n                'Пожалуйста, выберите озвучку перед выбором качества.',\n            );\n            this.hideSpinner();\n            return;\n        }\n        if (!this.videoSources[this.selectedTranslation][quality]) {\n            console.warn('Выбранное качество недоступно.');\n            this.hideSpinner();\n            return;\n        }\n\n        if (store) {\n            this.selectedQuality = quality;\n            this.storeQuality(quality);\n        } else {\n            this.selectedQuality = quality;\n        }\n\n        const urls =\n            this.videoSources[this.selectedTranslation][this.selectedQuality];\n        if (urls && urls.length > 0) {\n            const selectedUrl = urls[0];\n            const cleanSelectedUrl = selectedUrl.split('?')[0];\n\n            if (!this.videoType) {\n                if (cleanSelectedUrl.endsWith('.m3u8')) {\n                    this.videoType = 'hls';\n                } else if (cleanSelectedUrl.endsWith('.mpd')) {\n                    this.videoType = 'dash';\n                } else {\n                    this.videoType = 'mp4';\n                }\n            }\n\n            if (this.videoType === 'hls') {\n                if (typeof Hls === 'undefined') {\n                    console.warn('hls.js не найден');\n                    this.hideSpinner();\n                    return;\n                }\n                if (cleanSelectedUrl.endsWith('.m3u8')) {\n                    if (this.hls) {\n                        this.hls.destroy();\n                        this.hls = null;\n                    }\n                    this.hls = new Hls({\n                        maxMaxBufferLength: 30,\n                        maxBufferSize: 5 * 1024 * 1024,\n                        maxBufferLength: 30,\n                    });\n                    this.hls.attachMedia(this.video);\n                    this.hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n                        this.hls.loadSource(selectedUrl);\n                    });\n                    this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                        this.video.currentTime = currentTime;\n                        this.video.play().catch((err) => {\n                            console.error('Error playing video:', err);\n                            this.hideSpinner();\n                        });\n                    });\n                } else {\n                    this.video.src = selectedUrl;\n                    this.video.currentTime = currentTime;\n                    this.video.play().catch((err) => {\n                        console.error('Error playing video:', err);\n                        this.hideSpinner();\n                    });\n                    this.hideSpinner();\n                }\n            } else if (this.videoType === 'dash') {\n                if (typeof dashjs === 'undefined') {\n                    console.warn('dash.js не найден');\n                    this.hideSpinner();\n                    return;\n                }\n                if (cleanSelectedUrl.endsWith('.mpd')) {\n                    if (this.dashPlayer) {\n                        this.dashPlayer.reset();\n                        this.dashPlayer = null;\n                    }\n                    this.dashPlayer = dashjs.MediaPlayer().create();\n                    this.dashPlayer.initialize(this.video, selectedUrl, false);\n                    this.dashPlayer.setAutoSwitchQuality(false);\n                    this.dashPlayer.on(\n                        dashjs.MediaPlayer.events['MANIFEST_LOADED'],\n                        () => {\n                            this.video.currentTime = currentTime;\n                            this.video.play().catch((err) => {\n                                console.error('Error playing video:', err);\n                                this.hideSpinner();\n                            });\n                        },\n                    );\n                } else {\n                    this.video.src = selectedUrl;\n                    this.video.currentTime = currentTime;\n                    this.video.play().catch((err) => {\n                        console.error('Error playing video:', err);\n                        this.hideSpinner();\n                    });\n                    this.hideSpinner();\n                }\n            } else {\n                this.video.src = selectedUrl;\n                this.video.currentTime = currentTime;\n                this.video.play().catch((err) => {\n                    console.error('Error playing video:', err);\n                    this.hideSpinner();\n                });\n                this.hideSpinner();\n            }\n        } else {\n            console.warn('Не удалось установить источник видео.');\n            this.hideSpinner();\n        }\n    }\n};\n\nSigmaPlayer.prototype.selectQualityAuto = function (levelIndex) {\n    if (this.videoType === 'hls') {\n        if (this.hls) {\n            this.hls.currentLevel = levelIndex;\n            this.updateAutoQualityUI();\n            this.storeQuality(levelIndex);\n        }\n    } else if (this.videoType === 'dash') {\n        if (this.dashPlayer) {\n            if (levelIndex === -1) {\n                this.dashPlayer.setAutoSwitchQuality(true);\n            } else {\n                this.dashPlayer.setAutoSwitchQuality(false);\n                this.dashPlayer.setQualityFor('video', levelIndex);\n            }\n            this.storeQuality(levelIndex);\n        }\n    }\n};\n\nSigmaPlayer.prototype.updateAutoQualityUI = function () {\n    if (this.videoType === 'hls' && this.hls) {\n        const items = this.settingsSubmenu.querySelectorAll('[data-level]');\n        items.forEach((item) => {\n            if (parseInt(item.dataset.level) === this.hls.currentLevel) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n    }\n};\n\nSigmaPlayer.prototype.populateQualityOptionsAuto = function () {\n    // todo: implement\n};\n\nSigmaPlayer.prototype.populateTranslationOptions = function () {\n    if (this.videoType === 'dash') {\n        const translationDropdown = this.settingsMenu.querySelector(\n            \".sigma__settings-main [data-menu='translation']\",\n        );\n        if (translationDropdown) {\n            translationDropdown.style.display = 'block';\n        }\n        return;\n    }\n    const translations = Object.keys(this.videoSources);\n    if (translations.length <= 1) {\n        if (translations.length === 1) {\n            this.selectedTranslation = translations[0];\n            if (this.autoQuality) {\n                this.populateQualityOptionsAuto();\n                this.selectQuality('auto', false);\n            } else {\n                let preferredQuality = this.getStoredQuality();\n                if (\n                    !preferredQuality ||\n                    !this.videoSources[this.selectedTranslation][\n                        preferredQuality\n                    ]\n                ) {\n                    preferredQuality = this.chooseQualityBasedOnSpeed();\n                }\n                if (\n                    this.videoSources[this.selectedTranslation][\n                        preferredQuality\n                    ]\n                ) {\n                    this.selectQuality(preferredQuality, false);\n                } else {\n                    const qualities = Object.keys(\n                        this.videoSources[this.selectedTranslation],\n                    ).sort((a, b) => parseInt(b) - parseInt(a));\n                    preferredQuality =\n                        qualities.find(\n                            (q) => parseInt(q) <= parseInt(preferredQuality),\n                        ) || qualities[0];\n                    this.selectQuality(preferredQuality, false);\n                }\n            }\n            this.playEnabled = true;\n            this.enablePlayButton();\n        }\n        return;\n    }\n    this.selectTranslation(translations[0]);\n};\n\nSigmaPlayer.prototype.selectTranslation = function (translation) {\n    this.selectedTranslation = translation;\n    this.playEnabled = true;\n    this.enablePlayButton();\n};\n","SigmaPlayer.prototype.loadVideoSources = function (sources) {\n    if (typeof sources === 'string') {\n        this.autoQuality = true;\n        this.videoSources = { default: { auto: sources } };\n    } else if (typeof sources === 'object') {\n        let isQualityMapping = false;\n        for (let key in sources) {\n            if (typeof sources[key] === 'string') {\n                isQualityMapping = true;\n                break;\n            }\n        }\n        if (isQualityMapping) {\n            this.autoQuality = false;\n            this.videoSources = { default: sources };\n        } else {\n            this.autoQuality = false;\n            this.videoSources = sources;\n        }\n    } else {\n        console.error('Неверный формат источников видео.');\n        return;\n    }\n    this.populateTranslationOptions();\n};\n","// Метод скрытия подменю\nSigmaPlayer.prototype.hideSubmenu = function () {\n    this.settingsSubmenu.style.display = 'none';\n    this.settingsSubmenu.innerHTML = '';\n    this.settingsMain.style.display = 'block';\n};\n\n// Метод показа подменю для выбранного типа настроек\nSigmaPlayer.prototype.showSubmenu = function (menuType) {\n    this.settingsMain.style.display = 'none';\n    this.settingsSubmenu.style.display = 'block';\n    this.settingsSubmenu.innerHTML = '';\n    const backButton = document.createElement('div');\n    backButton.className = 'sigma__dropdown-item sigma__back-button';\n    const backIcon = getIcon('sigma-chevron-left');\n    backIcon.classList.add('sigma__backIcon');\n    backButton.appendChild(backIcon);\n    backButton.appendChild(\n        document.createTextNode(\n            ` ${\n                menuType === 'speed'\n                    ? 'Скорость'\n                    : menuType === 'translation'\n                    ? 'Озвучка'\n                    : 'Качество'\n            }`,\n        ),\n    );\n    backButton.setAttribute('tabindex', '0');\n    backButton.addEventListener('click', () => {\n        this.hideSubmenu();\n    });\n    backButton.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            backButton.click();\n        }\n    });\n    this.settingsSubmenu.appendChild(backButton);\n    if (menuType === 'speed') {\n        this.populateSpeedSubmenu();\n    } else if (menuType === 'translation') {\n        // Озвучка доступна только для DASH\n        if (\n            this.videoType === 'dash' &&\n            this.dashPlayer &&\n            typeof this.dashPlayer.getTracksFor === 'function'\n        ) {\n            this.populateTranslationSubmenu();\n        } else {\n            const msg = document.createElement('div');\n            msg.className = 'sigma__dropdown-item';\n            msg.textContent = 'Озвучка недоступна';\n            this.settingsSubmenu.appendChild(msg);\n        }\n    } else if (menuType === 'quality') {\n        this.populateQualitySubmenu();\n    }\n};\n\n// Подменю для выбора скорости воспроизведения\nSigmaPlayer.prototype.populateSpeedSubmenu = function () {\n    const speeds = [\n        { speed: 0.5, label: '0.5x' },\n        { speed: 1.0, label: '1.0x' },\n        { speed: 2.0, label: '2.0x' },\n    ];\n    speeds.forEach((item) => {\n        const speedOption = document.createElement('div');\n        speedOption.className = 'sigma__dropdown-item sigma__speed-option';\n        speedOption.dataset.speed = item.speed;\n        speedOption.textContent = item.label;\n        speedOption.setAttribute('tabindex', '0');\n        speedOption.addEventListener('click', () => {\n            this.setPlaybackSpeed(item.speed);\n            this.hideSubmenu();\n        });\n        speedOption.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                speedOption.click();\n            }\n        });\n        this.settingsSubmenu.appendChild(speedOption);\n    });\n};\n\n// Подменю для выбора озвучки (только для DASH)\nSigmaPlayer.prototype.populateTranslationSubmenu = function () {\n    var audioTracks = this.dashPlayer.getTracksFor('audio');\n    if (audioTracks.length === 0) {\n        var msg = document.createElement('div');\n        msg.className = 'sigma__dropdown-item';\n        msg.textContent = 'Нет аудио-дорожек';\n        this.settingsSubmenu.appendChild(msg);\n        return;\n    }\n    audioTracks.forEach((track, index) => {\n        // Если переданы названия озвучек, выполняем замену\n        let displayName;\n        if (\n            this.options.audioNames &&\n            Array.isArray(this.options.audioNames.names) &&\n            Array.isArray(this.options.audioNames.order)\n        ) {\n            // Извлекаем число, удаляя все нецифровые символы\n            const extracted = track.lang ? track.lang.replace(/\\D/g, '') : '';\n            const num = extracted ? parseInt(extracted) : index;\n            const orderArr = this.options.audioNames.order;\n            let mappedIndex = num;\n            if (num < orderArr.length) {\n                mappedIndex = orderArr[num];\n            }\n            const namesArr = this.options.audioNames.names;\n            if (mappedIndex < namesArr.length) {\n                displayName = namesArr[mappedIndex];\n                // Если название равно \"delete\", пропускаем эту дорожку\n                if (displayName === 'delete') {\n                    return;\n                }\n            } else {\n                displayName = track.lang || 'Дорожка ' + (index + 1);\n            }\n        } else {\n            displayName = track.lang || 'Дорожка ' + (index + 1);\n        }\n        var trackOption = document.createElement('div');\n        trackOption.className = 'sigma__dropdown-item';\n        trackOption.dataset.trackIndex = index;\n        trackOption.textContent = displayName;\n        trackOption.setAttribute('tabindex', '0');\n        trackOption.addEventListener('click', () => {\n            this.setAudioTrack(index);\n            this.hideSubmenu();\n        });\n        trackOption.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                trackOption.click();\n            }\n        });\n        this.settingsSubmenu.appendChild(trackOption);\n    });\n};\n\n// Подменю для выбора качества видео (без изменений)\nSigmaPlayer.prototype.populateQualitySubmenu = function () {\n    if (this.autoQuality) {\n        // Для DASH\n        if (this.videoType === 'dash') {\n            if (typeof dashjs === 'undefined') {\n                const msg = document.createElement('div');\n                msg.className = 'sigma__dropdown-item';\n                msg.textContent = 'dash.js не найден';\n                this.settingsSubmenu.appendChild(msg);\n                return;\n            }\n            if (!this.dashPlayer) {\n                const msg = document.createElement('div');\n                msg.className = 'sigma__dropdown-item';\n                msg.textContent = 'Нет доступных качеств';\n                this.settingsSubmenu.appendChild(msg);\n                return;\n            }\n            const autoOption = document.createElement('div');\n            autoOption.className = 'sigma__dropdown-item';\n            autoOption.textContent = 'Авто';\n            autoOption.dataset.level = -1;\n            autoOption.setAttribute('tabindex', '0');\n            autoOption.addEventListener('click', () => {\n                this.selectQualityAuto(-1);\n                this.hideSubmenu();\n            });\n            autoOption.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    autoOption.click();\n                }\n            });\n            this.settingsSubmenu.appendChild(autoOption);\n            const qualityList = this.dashPlayer.getBitrateInfoListFor('video');\n            const qualitySet = new Map();\n            qualityList.forEach((q) => {\n                let qualityLabel = q.height ? q.height + 'p' : `${q.bitrate}`;\n                if (!qualitySet.has(qualityLabel)) {\n                    qualitySet.set(qualityLabel, q.qualityIndex);\n                }\n            });\n            qualitySet.forEach((levelIndex, qualityLabel) => {\n                const qualityOption = document.createElement('div');\n                qualityOption.className = 'sigma__dropdown-item';\n                qualityOption.textContent = qualityLabel;\n                qualityOption.dataset.level = levelIndex;\n                qualityOption.setAttribute('tabindex', '0');\n                qualityOption.addEventListener('click', () => {\n                    this.selectQualityAuto(\n                        parseInt(qualityOption.dataset.level),\n                    );\n                    this.hideSubmenu();\n                });\n                qualityOption.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        qualityOption.click();\n                    }\n                });\n                this.settingsSubmenu.appendChild(qualityOption);\n            });\n        } else if (this.videoType === 'hls') {\n            const msg = document.createElement('div');\n            msg.className = 'sigma__dropdown-item';\n            msg.textContent = 'Выбор качества недоступен';\n            this.settingsSubmenu.appendChild(msg);\n        }\n    } else {\n        if (!this.selectedTranslation) {\n            const msg = document.createElement('div');\n            msg.className = 'sigma__dropdown-item';\n            msg.textContent = 'Нет озвучки';\n            this.settingsSubmenu.appendChild(msg);\n            return;\n        }\n        const qualities = Object.keys(\n            this.videoSources[this.selectedTranslation],\n        ).sort((a, b) => parseInt(b) - parseInt(a));\n        qualities.forEach((quality) => {\n            const qualityOption = document.createElement('div');\n            qualityOption.className = 'sigma__dropdown-item';\n            qualityOption.textContent = quality;\n            qualityOption.dataset.quality = quality;\n            qualityOption.setAttribute('tabindex', '0');\n            qualityOption.addEventListener('click', () => {\n                this.selectQuality(quality);\n                this.hideSubmenu();\n            });\n            qualityOption.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    qualityOption.click();\n                }\n            });\n            this.settingsSubmenu.appendChild(qualityOption);\n        });\n    }\n};\n\n// Новый метод для переключения аудио-дорожки (принимает индекс) – уже реализован\nSigmaPlayer.prototype.setAudioTrack = function (index) {\n    if (\n        this.videoType === 'dash' &&\n        this.dashPlayer &&\n        typeof this.dashPlayer.getTracksFor === 'function'\n    ) {\n        var audioTracks = this.dashPlayer.getTracksFor('audio');\n        if (audioTracks && audioTracks[index]) {\n            this.dashPlayer.setCurrentTrack(audioTracks[index]);\n            console.log(\n                'Выбрана аудио-дорожка:',\n                audioTracks[index].lang || 'Дорожка ' + (index + 1),\n            );\n        }\n    } else if (this.videoType === 'hls' && this.hls && this.hls.audioTracks) {\n        if (this.hls.audioTracks[index]) {\n            this.hls.audioTrack = index;\n            console.log(\n                'Выбрана аудио-дорожка:',\n                this.hls.audioTracks[index].name ||\n                    this.hls.audioTracks[index].lang ||\n                    'Дорожка ' + (index + 1),\n            );\n        }\n    }\n};\n\n// Новый метод setCurrentTrack – для поддержки примера смены озвучки.\n// Если передается объект дорожки, ищем его индекс в списке аудио-дорожек и вызываем setAudioTrack.\nSigmaPlayer.prototype.setCurrentTrack = function (track) {\n    if (\n        this.videoType === 'dash' &&\n        this.dashPlayer &&\n        typeof this.dashPlayer.getTracksFor === 'function'\n    ) {\n        var audioTracks = this.dashPlayer.getTracksFor('audio');\n        var index = audioTracks.indexOf(track);\n        if (index !== -1) {\n            this.setAudioTrack(index);\n        } else {\n            console.warn('Аудиодорожка не найдена');\n        }\n    } else {\n        console.warn('setCurrentTrack доступен только для DASH');\n    }\n};\n"]}